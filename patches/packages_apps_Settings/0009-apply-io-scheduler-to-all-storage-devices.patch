From 4be5f7151efc79df48fde6a91369e630be8cb162 Mon Sep 17 00:00:00 2001
From: Michael Bestas <mikeioannina@gmail.com>
Date: Wed, 11 Jun 2014 02:41:37 +0300
Subject: [PATCH] Apply IO scheduler settings to all storage devices

Some older devices have MTD partitions and an external SD card.
Until now, IO scheduler settings were only applied to mmcblk0 which is
the external sd in older devices or the internal storage in most new devices.

Newer devices can also have both internal & external sdcard
(mmcblk0 & mmcblk1) so we should cover both of them

This needs the necessary permissions in init.<ro.hardware>.rc
for any extra device-specific partitions. Example:
https://github.com/LegacyXperia/android_device_semc_msm7x30-common/commit/5e6df8d60f6590e560629b2affd6da5f6a166dec

Change-Id: I340b8bab645c2bdd39e06f90835629a1983873bd
---
 .../android/settings/cyanogenmod/BootReceiver.java | 35 ++++++++++++++++--
 .../android/settings/cyanogenmod/IOScheduler.java  | 41 +++++++++++++++++++---
 2 files changed, 69 insertions(+), 7 deletions(-)

diff --git a/src/com/android/settings/cyanogenmod/BootReceiver.java b/src/com/android/settings/cyanogenmod/BootReceiver.java
index 85d9b5e..7c11797 100644
--- a/src/com/android/settings/cyanogenmod/BootReceiver.java
+++ b/src/com/android/settings/cyanogenmod/BootReceiver.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012 The CyanogenMod Project
+ * Copyright (C) 2012-2014 The CyanogenMod Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -138,8 +138,11 @@ public class BootReceiver extends BroadcastReceiver {
             return;
         }
 
+        String ioschedlist = IOScheduler.IOSCHED_LIST_FILE;
+        String mtdioschedlist = IOScheduler.IOSCHED_MTD_LIST_FILE;
+        String ioschedfile = "";
         String ioscheduler = prefs.getString(IOScheduler.IOSCHED_PREF, null);
-        String availableIOSchedulersLine = Utils.fileReadOneLine(IOScheduler.IOSCHED_LIST_FILE);
+        String availableIOSchedulersLine = Utils.fileReadOneLine(ioschedlist);
         boolean noSettings = ((availableIOSchedulersLine == null) || (ioscheduler == null));
         List<String> ioschedulers = null;
 
@@ -150,7 +153,33 @@ public class BootReceiver extends BroadcastReceiver {
                 ioschedulers = Arrays.asList(availableIOSchedulersLine.replace("[", "").replace("]", "").split(" "));
             }
             if (ioscheduler != null && ioschedulers != null && ioschedulers.contains(ioscheduler)) {
-                Utils.fileWriteOneLine(IOScheduler.IOSCHED_LIST_FILE, ioscheduler);
+                Utils.fileWriteOneLine(ioschedlist, ioscheduler);
+                final String file = ioschedlist;
+                ioschedfile = file.replace("mmcblk0", "mmcblk1");
+                if (Utils.fileExists(ioschedfile)) {
+                    if (Utils.fileIsWritable(ioschedfile)) {
+                        Utils.fileWriteOneLine(ioschedfile, ioscheduler);
+                    } else {
+                        Log.e(TAG, ioschedfile +
+                        " not writable, did you set ueventd rules?");
+                    }
+                }
+
+                if (Utils.fileExists(mtdioschedlist) && Utils.fileIsWritable(mtdioschedlist)) {
+                    Utils.fileWriteOneLine(mtdioschedlist, ioscheduler);
+                    final String mtdfile = mtdioschedlist;
+                    for (int i = 1; i < 10; i++) {
+                        ioschedfile = mtdfile.replace("mtdblock0", "mtdblock" + i);
+                        if (Utils.fileExists(ioschedfile)) {
+                            if (Utils.fileIsWritable(ioschedfile)) {
+                                Utils.fileWriteOneLine(ioschedfile, ioscheduler);
+                            } else {
+                                Log.e(TAG, ioschedfile +
+                                " not writable, did you set ueventd rules?");
+                            }
+                        }
+                    }
+                }
             }
             Log.d(TAG, "I/O scheduler settings restored.");
         }
diff --git a/src/com/android/settings/cyanogenmod/IOScheduler.java b/src/com/android/settings/cyanogenmod/IOScheduler.java
index 68142c5..a0874c6 100644
--- a/src/com/android/settings/cyanogenmod/IOScheduler.java
+++ b/src/com/android/settings/cyanogenmod/IOScheduler.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012 The CyanogenMod Project
+ * Copyright (C) 2012-2014 The CyanogenMod Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@ import android.os.Message;
 import android.preference.ListPreference;
 import android.preference.Preference;
 import android.preference.PreferenceScreen;
+import android.util.Log;
 
 import com.android.settings.R;
 import com.android.settings.SettingsPreferenceFragment;
@@ -35,6 +36,7 @@ public class IOScheduler extends SettingsPreferenceFragment implements
 
     public static final String IOSCHED_PREF = "pref_io_sched";
     public static final String IOSCHED_LIST_FILE = "/sys/block/mmcblk0/queue/scheduler";
+    public static final String IOSCHED_MTD_LIST_FILE = "/sys/block/mtdblock0/queue/scheduler";
 
     public static final String SOB_PREF = "pref_io_sched_set_on_boot";
 
@@ -102,17 +104,48 @@ public class IOScheduler extends SettingsPreferenceFragment implements
         }
     }
 
-    public boolean onPreferenceChange(Preference preference, Object newValue) {
+    public boolean onPreferenceChange(Preference preference, Object value) {
+        final String newValue = (String) value;
         String fname = "";
+        String mtdfname = "";
+        String ioschedfile = "";
 
         if (newValue != null) {
             if (preference == mIOSchedulerPref) {
                 fname = IOSCHED_LIST_FILE;
+                mtdfname = IOSCHED_MTD_LIST_FILE;
             }
 
-            if (Utils.fileWriteOneLine(fname, (String) newValue)) {
+            if (Utils.fileExists(fname) && Utils.fileWriteOneLine(fname, newValue)) {
+                final String file = fname;
+                ioschedfile = file.replace("mmcblk0", "mmcblk1");
+                if (Utils.fileExists(ioschedfile)) {
+                    if (Utils.fileIsWritable(ioschedfile)) {
+                        Utils.fileWriteOneLine(ioschedfile, newValue);
+                    } else {
+                        Log.e(TAG, ioschedfile +
+                        " not writable, did you set ueventd rules?");
+                    }
+                }
+
+                if (Utils.fileExists(mtdfname) && Utils.fileIsWritable(mtdfname)) {
+                    Utils.fileWriteOneLine(mtdfname, newValue);
+                    final String mtdfile = mtdfname;
+                    for (int i = 1; i < 10; i++) {
+                        ioschedfile = mtdfile.replace("mtdblock0", "mtdblock" + i);
+                        if (Utils.fileExists(ioschedfile)) {
+                            if (Utils.fileIsWritable(ioschedfile)) {
+                                Utils.fileWriteOneLine(ioschedfile, newValue);
+                            } else {
+                                Log.e(TAG, ioschedfile +
+                                " not writable, did you set ueventd rules?");
+                            }
+                        }
+                    }
+                }
+
                 if (preference == mIOSchedulerPref) {
-                    mIOSchedulerPref.setSummary(String.format(mIOSchedulerFormat, (String) newValue));
+                    mIOSchedulerPref.setSummary(String.format(mIOSchedulerFormat, newValue));
                 }
                 return true;
             } else {
-- 
1.9.3

