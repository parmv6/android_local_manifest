From 9069b8fe78e886bf1079f190d125356c2a24f06d Mon Sep 17 00:00:00 2001
From: Conn O'Griofa <connogriofa@gmail.com>
Date: Wed, 21 May 2014 06:05:10 +0100
Subject: [PATCH] Add UUID (re-)scan support for vold-mounted volume (2/2)

Consider the following scenario:
* Using physical primary only storage cofigurations with the sdcard
  daemon
* On first boot, the UUID is plumbed to the framework via vold, but this
  is only done when a volume is mounted (via the extractMetadata()
  function).
* When the framework crashes/restarts, vold does not need to mount any
  volumes (as the sdcard daemon will still be running), which means
  that the UUID is never plumbed to the framework upon restart.
* MediaProvider will continuously crash with an NPE due to the UUID being
  null.

Workaround the issue by adding "scanuuid" to the "vdc volume" command
list, and trigger a scan when the framework detects that a volume is
mounted but the UUID is null.

Change-Id: I4a48a1612ea7d6fcba7150bfc66c03045a86e253
---
 CommandListener.cpp |  6 ++++++
 Volume.cpp          | 26 ++++++++++++++++++++++++++
 Volume.h            |  1 +
 VolumeManager.cpp   | 11 +++++++++++
 VolumeManager.h     |  1 +
 5 files changed, 45 insertions(+)

diff --git a/CommandListener.cpp b/CommandListener.cpp
index 70fe24d..bcb3cdd 100644
--- a/CommandListener.cpp
+++ b/CommandListener.cpp
@@ -150,6 +150,12 @@ int CommandListener::VolumeCmd::runCommand(SocketClient *cli,
             return 0;
         }
         rc = vm->mountVolume(argv[2]);
+    } else if (!strcmp(argv[1], "scanuuid")) {
+        if (argc != 3) {
+            cli->sendMsg(ResponseCode::CommandSyntaxError, "Usage: volume scanuuid <path>", false);
+            return 0;
+        }
+        rc = vm->scanUuid(argv[2]);
     } else if (!strcmp(argv[1], "unmount")) {
         if (argc < 3 || argc > 4 ||
            ((argc == 4 && strcmp(argv[3], "force")) &&
diff --git a/Volume.cpp b/Volume.cpp
index 16bbb90..f4445d3 100644
--- a/Volume.cpp
+++ b/Volume.cpp
@@ -369,6 +369,32 @@ bool Volume::isMountpointMounted(const char *path) {
     return false;
 }
 
+int Volume::scanUuid() {
+    char device[256];
+    char mount_path[256];
+    char rest[256];
+    FILE *fp;
+    char line[1024];
+
+    if (!(fp = fopen("/proc/mounts", "r"))) {
+        SLOGE("Error opening /proc/mounts (%s)", strerror(errno));
+        return -1;
+    }
+
+    while(fgets(line, sizeof(line), fp)) {
+        line[strlen(line)-1] = '\0';
+        sscanf(line, "%255s %255s %255s\n", device, mount_path, rest);
+        if (!strcmp(mount_path, getMountpoint())) {
+            fclose(fp);
+            extractMetadata(device);
+            return 0;
+        }
+    }
+
+    fclose(fp);
+    return -1;
+}
+
 int Volume::mountVol() {
     dev_t deviceNodes[4];
     int n, i = 0;
diff --git a/Volume.h b/Volume.h
index c1be400..56f0dd1 100644
--- a/Volume.h
+++ b/Volume.h
@@ -72,6 +72,7 @@ public:
     Volume(VolumeManager *vm, const fstab_rec* rec, int flags);
     virtual ~Volume();
 
+    int scanUuid();
     int mountVol();
     int unmountVol(bool force, bool revert);
     int formatVol(bool wipe, const char *fstype = NULL);
diff --git a/VolumeManager.cpp b/VolumeManager.cpp
index 7f85076..4770d9a 100644
--- a/VolumeManager.cpp
+++ b/VolumeManager.cpp
@@ -1292,6 +1292,17 @@ int VolumeManager::mountVolume(const char *label) {
     return v->mountVol();
 }
 
+int VolumeManager::scanUuid(const char *label) {
+    Volume *v = lookupVolume(label);
+
+    if (!v) {
+        errno = ENOENT;
+        return -1;
+    }
+
+    return v->scanUuid();
+}
+
 int VolumeManager::listMountedObbs(SocketClient* cli) {
     char device[256];
     char mount_path[256];
diff --git a/VolumeManager.h b/VolumeManager.h
index 158c28b..3683626 100644
--- a/VolumeManager.h
+++ b/VolumeManager.h
@@ -79,6 +79,7 @@ public:
 
     int listVolumes(SocketClient *cli);
     int mountVolume(const char *label);
+    int scanUuid(const char *label);
     int unmountVolume(const char *label, bool force, bool revert);
     int shareVolume(const char *label, const char *method);
     int unshareVolume(const char *label, const char *method);
-- 
1.9.3

