From 62ce4712ab4aee75dc8b78dab49ce65486700bc7 Mon Sep 17 00:00:00 2001
From: Craig Schmitt <craigschmitt@cmshome.net>
Date: Mon, 7 Jul 2014 18:26:29 -0500
Subject: [PATCH] MMS: Add feature to auto-enable mobile data for MMS send or
 receive.

Change-Id: I1b79d42fb7ef16de4aedf5557ae6f3f82dd3a7c3

Conflicts:
	res/values/cm_strings.xml
---
 AndroidManifest.xml                                |  3 +
 res/values/cm_strings.xml                          |  5 ++
 res/xml/preferences.xml                            |  6 ++
 .../mms/transaction/MmsSystemEventReceiver.java    | 56 ++++++++++++++--
 .../mms/transaction/TransactionService.java        | 75 ++++++++++++++++++----
 .../mms/ui/MessagingPreferenceActivity.java        |  7 ++
 6 files changed, 133 insertions(+), 19 deletions(-)

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 661a330..2ec15cc 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -238,6 +238,9 @@
             <intent-filter>
                 <action android:name="android.intent.action.BOOT_COMPLETED" />
             </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.AIRPLANE_MODE"/>
+            </intent-filter>
         </receiver>
 
         <activity android:name=".ui.ManageSimMessages"
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index 2cfb44f..7b12716 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -192,4 +192,9 @@
     <string name="menu_conversation_options">Conversation options</string>
     <string name="pref_title_reset_convopt_to_default">Reset to default</string>
     <string name="pref_summary_reset_convopt_to_default">Resets the conversation setting to the application level setting</string>
+
+    <!-- Settings item for boolean option to auto -enable data for MMS messages -->
+    <string name="pref_title_mms_auto_enable_data">Auto-enable data</string>
+    <!-- Settings item description for boolean auto-enable data for MMS option -->
+    <string name="pref_summary_mms_auto_enable_data">Automatically enable mobile data for MMS messages</string>
 </resources>
diff --git a/res/xml/preferences.xml b/res/xml/preferences.xml
index 6ced55b..a65f437 100644
--- a/res/xml/preferences.xml
+++ b/res/xml/preferences.xml
@@ -125,6 +125,12 @@
             android:title="@string/pref_title_mms_read_reports" />
 
         <CheckBoxPreference
+            android:defaultValue="false"
+            android:key="pref_key_mms_auto_enable_data"
+            android:title="@string/pref_title_mms_auto_enable_data"
+            android:summary="@string/pref_summary_mms_auto_enable_data" />
+
+        <CheckBoxPreference
             android:defaultValue="true"
             android:key="pref_key_mms_auto_retrieval"
             android:title="@string/pref_title_mms_auto_retrieval"
diff --git a/src/com/android/mms/transaction/MmsSystemEventReceiver.java b/src/com/android/mms/transaction/MmsSystemEventReceiver.java
index a91d475..d5a1a1b 100644
--- a/src/com/android/mms/transaction/MmsSystemEventReceiver.java
+++ b/src/com/android/mms/transaction/MmsSystemEventReceiver.java
@@ -20,14 +20,18 @@ package com.android.mms.transaction;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
+import android.content.SharedPreferences;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.net.Uri;
+import android.preference.PreferenceManager;
+import android.provider.Settings;
 import android.provider.Telephony.Mms;
 import android.util.Log;
 
 import com.android.mms.LogTag;
 import com.android.mms.MmsApp;
+import com.android.mms.ui.MessagingPreferenceActivity;
 import com.android.mms.util.MultiSimUtility;
 
 /**
@@ -44,6 +48,7 @@ import com.android.mms.util.MultiSimUtility;
 public class MmsSystemEventReceiver extends BroadcastReceiver {
     private static final String TAG = "MmsSystemEventReceiver";
     private static ConnectivityManager mConnMgr = null;
+    private Context mContext;
 
     public static void wakeUpService(Context context) {
         Log.d(TAG, "wakeUpService: start service ...");
@@ -54,6 +59,11 @@ public class MmsSystemEventReceiver extends BroadcastReceiver {
 
     @Override
     public void onReceive(Context context, Intent intent) {
+        mContext = context;
+        if (mConnMgr == null) {
+            mConnMgr = (ConnectivityManager) context
+                    .getSystemService(Context.CONNECTIVITY_SERVICE);
+        }
         if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
             Log.v(TAG, "Intent received: " + intent);
         }
@@ -63,13 +73,9 @@ public class MmsSystemEventReceiver extends BroadcastReceiver {
             Uri changed = (Uri) intent.getParcelableExtra(Mms.Intents.DELETED_CONTENTS);
             MmsApp.getApplication().getPduLoaderManager().removePdu(changed);
         } else if (action.equals(ConnectivityManager.CONNECTIVITY_ACTION)) {
-            if (mConnMgr == null) {
-                mConnMgr = (ConnectivityManager) context
-                        .getSystemService(Context.CONNECTIVITY_SERVICE);
-            }
-            if (!mConnMgr.getMobileDataEnabled()) {
+            if (!isNetworkAvailable()) {
                 if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
-                    Log.v(TAG, "mobile data turned off, bailing");
+                    Log.v(TAG, "mobile data unavailable, bailing");
                 }
                 return;
             }
@@ -88,7 +94,7 @@ public class MmsSystemEventReceiver extends BroadcastReceiver {
                            ", isConnected = " + isConnected);
 
             // Wake up transact service when MMS data is available and isn't connected.
-            if (available && !isConnected) {
+            if (isNetworkAvailable() && !isConnected) {
                 wakeUpService(context);
             }
         } else if (action.equals(Intent.ACTION_BOOT_COMPLETED)) {
@@ -101,6 +107,42 @@ public class MmsSystemEventReceiver extends BroadcastReceiver {
             // Scan and send pending Mms once after boot completed since
             // ACTION_ANY_DATA_CONNECTION_STATE_CHANGED wasn't registered in a whole life cycle
             wakeUpService(context);
+        } else if (action.equals(Intent.ACTION_AIRPLANE_MODE_CHANGED)) {
+            // Wake up transact service upon leaving airplane mode if auto-enable data
+            if (isAutoEnableData() && !isAirplaneModeOn()) {
+                wakeUpService(context);
+            }
+        }
+    }
+
+    private boolean isAutoEnableData() {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(mContext);
+        boolean result = prefs.getBoolean(MessagingPreferenceActivity.AUTO_ENABLE_DATA, false);
+        Log.d(TAG, "isAutoEnableData=" + result);
+        return result;
+    }
+
+    private boolean isAirplaneModeOn() {
+        boolean result = Settings.Global.getInt(mContext.getContentResolver(),
+                Settings.Global.AIRPLANE_MODE_ON, 0) != 0;
+        Log.d(TAG, "isAirplaneModeOn=" + result);
+        return result;
+    }
+
+    private boolean isNetworkAvailable() {
+        boolean result = false;
+        if (mConnMgr == null) {
+            result = false;
+        } else {
+            if (mConnMgr.getMobileDataEnabled()) {
+                NetworkInfo ni = mConnMgr.getNetworkInfo(ConnectivityManager.TYPE_MOBILE_MMS);
+                result = (ni == null ? false : ni.isAvailable());
+            } else {
+                // we can auto-enable data, so report available
+                result = !isAirplaneModeOn() && isAutoEnableData();
+            }
         }
+        Log.d(TAG, "isNetworkAvailable=" + result);
+        return result;
     }
 }
diff --git a/src/com/android/mms/transaction/TransactionService.java b/src/com/android/mms/transaction/TransactionService.java
index 8bfcd6c..c949b32 100644
--- a/src/com/android/mms/transaction/TransactionService.java
+++ b/src/com/android/mms/transaction/TransactionService.java
@@ -28,6 +28,7 @@ import android.content.ContentValues;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
+import android.content.SharedPreferences;
 import android.database.Cursor;
 import android.database.sqlite.SqliteWrapper;
 import android.database.DatabaseUtils;
@@ -42,6 +43,8 @@ import android.os.Looper;
 import android.os.Message;
 import android.os.PowerManager;
 import android.os.SystemProperties;
+import android.preference.PreferenceManager;
+import android.provider.Settings;
 import android.provider.Telephony.Mms;
 import android.provider.Telephony.MmsSms;
 import android.provider.Telephony.Mms.Sent;
@@ -58,6 +61,7 @@ import com.android.internal.telephony.TelephonyProperties;
 import com.android.mms.LogTag;
 import com.android.mms.MmsConfig;
 import com.android.mms.R;
+import com.android.mms.ui.MessagingPreferenceActivity;
 import com.android.mms.util.DownloadManager;
 import com.android.mms.util.MultiSimUtility;
 import com.android.mms.util.RateController;
@@ -165,6 +169,9 @@ public class TransactionService extends Service implements Observer {
     private final int maxLaunchRetryAttempts = 5;
     private ArrayList<TxnRequest> mTxnSubIdMap = new ArrayList();
 
+    // Indicates mobile data was enabled automatically by MMS
+    private boolean mDataEnabledByAuto = false;
+
     public Handler mToastHandler = new Handler() {
         @Override
         public void handleMessage(Message msg) {
@@ -424,21 +431,16 @@ public class TransactionService extends Service implements Observer {
     }
 
     public void onNewIntent(Intent intent, int serviceId) {
+        Log.d(TAG, "onNewIntent: serviceId: " + serviceId + ": " + intent.getExtras() +
+                " intent=" + intent);
+        boolean noNetwork = !isNetworkAvailable();
         mConnMgr = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
-        if (mConnMgr == null || !mConnMgr.getMobileDataEnabled()
-                || !MmsConfig.isSmsEnabled(getApplicationContext())) {
+        if (noNetwork || !MmsConfig.isSmsEnabled(getApplicationContext())) {
             endMmsConnectivity();
             decRefCount();
             return;
         }
 
-        NetworkInfo ni = mConnMgr.getNetworkInfo(ConnectivityManager.TYPE_MOBILE_MMS);
-        boolean noNetwork = ni == null || !ni.isAvailable();
-
-        Log.d(TAG, "onNewIntent: serviceId: " + serviceId + ": " + intent.getExtras() +
-                " intent=" + intent);
-        Log.d(TAG, "    networkAvailable=" + !noNetwork);
-
         Bundle extras = intent.getExtras();
         String action = intent.getAction();
         if ((ACTION_ONALARM.equals(action) || ACTION_ENABLE_AUTO_RETRIEVE.equals(action) ||
@@ -695,13 +697,36 @@ public class TransactionService extends Service implements Observer {
         return type >= MmsSms.NO_ERROR && type < MmsSms.ERR_TYPE_GENERIC_PERMANENT;
     }
 
+    private boolean isAutoEnableData() {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(
+                getApplicationContext());
+        boolean result = prefs.getBoolean(MessagingPreferenceActivity.AUTO_ENABLE_DATA, false);
+        Log.d(TAG, "isAutoEnableData=" + result);
+        return result;
+    }
+
+    private boolean isAirplaneModeOn() {
+        boolean result = Settings.Global.getInt(getApplicationContext().getContentResolver(),
+                Settings.Global.AIRPLANE_MODE_ON, 0) != 0;
+        Log.d(TAG, "isAirplaneModeOn=" + result);
+        return result;
+    }
+
     private boolean isNetworkAvailable() {
+        boolean result = false;
         if (mConnMgr == null) {
-            return false;
+            result = false;
         } else {
-            NetworkInfo ni = mConnMgr.getNetworkInfo(ConnectivityManager.TYPE_MOBILE_MMS);
-            return (ni == null ? false : ni.isAvailable());
+            if (mConnMgr.getMobileDataEnabled()) {
+                NetworkInfo ni = mConnMgr.getNetworkInfo(ConnectivityManager.TYPE_MOBILE_MMS);
+                result = (ni == null ? false : ni.isAvailable());
+            } else {
+                // we can auto-enable data, so report available
+                result = !isAirplaneModeOn() && isAutoEnableData();
+            }
         }
+        Log.d(TAG, "isNetworkAvailable=" + result);
+        return result;
     }
 
     private int getTransactionType(int msgType) {
@@ -896,6 +921,19 @@ public class TransactionService extends Service implements Observer {
         // Take a wake lock so we don't fall asleep before the message is downloaded.
         createWakeLock();
 
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(
+                getApplicationContext());
+        boolean autoEnableData = prefs.getBoolean(
+                MessagingPreferenceActivity.AUTO_ENABLE_DATA, false);
+
+        if (!mConnMgr.getMobileDataEnabled() && autoEnableData) {
+            Log.d(TAG, "autoEnableData: enabling mobile data");
+            mDataEnabledByAuto = true;
+            mConnMgr.setMobileDataEnabled(true);
+        } else if (!autoEnableData) {
+            mDataEnabledByAuto = false;
+        }
+
         int result = mConnMgr.startUsingNetworkFeature(
                 ConnectivityManager.TYPE_MOBILE, Phone.FEATURE_ENABLE_MMS);
 
@@ -919,12 +957,25 @@ public class TransactionService extends Service implements Observer {
                 Log.v(TAG, "endMmsConnectivity");
             }
 
+            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(
+                    getApplicationContext());
+            boolean autoEnableData = prefs.getBoolean(
+                    MessagingPreferenceActivity.AUTO_ENABLE_DATA, false);
+
             // cancel timer for renewal of lease
             mServiceHandler.removeMessages(EVENT_CONTINUE_MMS_CONNECTIVITY);
             if (mConnMgr != null) {
                 mConnMgr.stopUsingNetworkFeature(
                         ConnectivityManager.TYPE_MOBILE,
                         Phone.FEATURE_ENABLE_MMS);
+                if (mConnMgr.getMobileDataEnabled()
+                        && autoEnableData && mDataEnabledByAuto) {
+                    Log.d(TAG, "autoEnableData: disabling mobile data");
+                    mDataEnabledByAuto = false;
+                    mConnMgr.setMobileDataEnabled(false);
+                } else if (!autoEnableData) {
+                    mDataEnabledByAuto = false;
+                }
             }
         } finally {
             releaseWakeLock();
diff --git a/src/com/android/mms/ui/MessagingPreferenceActivity.java b/src/com/android/mms/ui/MessagingPreferenceActivity.java
index 170a823..b184bdf 100755
--- a/src/com/android/mms/ui/MessagingPreferenceActivity.java
+++ b/src/com/android/mms/ui/MessagingPreferenceActivity.java
@@ -70,6 +70,7 @@ public class MessagingPreferenceActivity extends PreferenceActivity
     public static final String NOTIFICATION_VIBRATE     = "pref_key_vibrate";
     public static final String NOTIFICATION_VIBRATE_WHEN= "pref_key_vibrateWhen";
     public static final String NOTIFICATION_RINGTONE    = "pref_key_ringtone";
+    public static final String AUTO_ENABLE_DATA         = "pref_key_mms_auto_enable_data";
     public static final String AUTO_RETRIEVAL           = "pref_key_mms_auto_retrieval";
     public static final String RETRIEVAL_DURING_ROAMING = "pref_key_mms_retrieval_during_roaming";
     public static final String AUTO_DELETE              = "pref_key_auto_delete";
@@ -144,6 +145,7 @@ public class MessagingPreferenceActivity extends PreferenceActivity
     private CheckBoxPreference mEnablePrivacyModePref;
     private CheckBoxPreference mEnableEmoticonsPref;
     private CheckBoxPreference mMmsAutoRetrievialPref;
+    private CheckBoxPreference mMmsAutoEnableDataPref;
     private RingtonePreference mRingtonePref;
     private Recycler mSmsRecycler;
     private Recycler mMmsRecycler;
@@ -250,6 +252,7 @@ public class MessagingPreferenceActivity extends PreferenceActivity
         mMmsLimitPref = findPreference("pref_key_mms_delete_limit");
         mClearHistoryPref = findPreference("pref_key_mms_clear_history");
         mEnableNotificationsPref = (CheckBoxPreference) findPreference(NOTIFICATION_ENABLED);
+        mMmsAutoEnableDataPref = (CheckBoxPreference) findPreference(AUTO_ENABLE_DATA);
         mMmsAutoRetrievialPref = (CheckBoxPreference) findPreference(AUTO_RETRIEVAL);
         mEnablePrivacyModePref = (CheckBoxPreference) findPreference(PRIVACY_MODE_ENABLED);
         mVibratePref = (CheckBoxPreference) findPreference(NOTIFICATION_VIBRATE);
@@ -586,6 +589,10 @@ public class MessagingPreferenceActivity extends PreferenceActivity
             if (mMmsAutoRetrievialPref.isChecked()) {
                 startMmsDownload();
             }
+        } else if (preference == mMmsAutoEnableDataPref) {
+            if (mMmsAutoEnableDataPref.isChecked()) {
+                startMmsDownload();
+            }
         }
 
         return super.onPreferenceTreeClick(preferenceScreen, preference);
-- 
1.9.3

